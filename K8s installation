
#Give all traffic in the security groups of ec2 instances.........
--------------------------------------------------------------------
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

#------------------------------------------------------------------------------

sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

#--------------------------------------------------------------------------------
sudo sysctl --system
swapoff -a
cat <<EOF | tee /etc/yum.repos.d/cri-o.repo
[cri-o]
name=CRI-O
baseurl=https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/rpm/repodata/repomd.xml.key
EOF

#------------------------------------------------------------------------------------------------------------------

sudo yum install -y conntrack     container-selinux     ebtables     ethtool     iptables     socat

#--------------------------------------------------------------------------------

yum install -y iproute-tc

#--------------------------------------------------------------------------------
cat <<EOF | tee /etc/yum.repos.d/cri-o.repo
[cri-o]
name=CRI-O
baseurl=https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/rpm/repodata/repomd.xml.key
EOF

#--------------------------------------------------------------------------------


yum install -y cri-o

#-------------------------------------------------------------------------------


sudo systemctl daemon-reload

#---------------------------------------------------------------------------------


sudo systemctl enable crio --now

#--------------------------------------------------------------------------------

sudo systemctl start crio.service

#-------------------------------------------------------------------------

################USE the other if not working...............................

cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF

#............................................
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF



#....................................................................


yum install -y kubelet kubeadm kubectl --disableexcludes=Kubernetes

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

systemctl enable --now kubelet
systemctl start kubelet

kubeadm init --apiserver-advertise-address=172.31.42.148 --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem

#replace  ipaddress with private ip of the k8s master ec2 instance.

 mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

kubectl taint nodes --all node-role.kubernetes.io/control-plane-
kubectl get nodes


kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

-------------------------------------------------------------------------------------------------------------------------------------------------
IN NODES:

kubeadm join 172.31.42.148:6443 --token k8hy2x.7trjhte8re9edyab         --discovery-token-ca-cert-hash sha256:8c1d8ad50ae5bd0b8135b6c459779bf74709ee523315b37f6f2d275381a6b3a4


run the command to join the servers as nodes to the k8s master

-----------------------------------------------------------------------------------------------------------------------------



cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
EOF

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32000
EOF


kubectl get pods

kubectl get svc









Guides:
https://devopscube.com/setup-kubernetes-cluster-kubeadm/
https://cri-o.io/

https://github.com/cri-o/cri-o/blob/main/tutorials/kubeadm.md

https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management
